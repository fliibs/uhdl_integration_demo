//==========================================================================================================================
//Key is used to ensure the consistency of file version and content, and cannot be modified.
//Version Control is the version number written when the file is generated and cannot be modified.
//ToolMessage is used to record related information of any tool that has processed the file and cannot be manually modified.
//UserMessage is used by the user to write any information, which can be modified in any way.
//Content is the actual payload of the file.
//Parameter is the additional parameter information carried by the file and cannot be modified in any way.

//Key is generated by the hash of Version Control, Content and Parameter to ensure the consistency of the file.
//These three parts do not allow any individual modification
//==========================================================================================================================


//[UHDL]Key Start [md5:bb2b7214ebcd560d16d39d26f840dc49]
//Version Control Hash: 3accddf64b1dd03abeb9b0b3e5a7ba44
//Content Hash: 52de3cee23d2812bc32beb1e73bceb70
//Parameter Hash: d41d8cd98f00b204e9800998ecf8427e
//[UHDL]Key End [md5:bb2b7214ebcd560d16d39d26f840dc49]

//[UHDL]Version Control Start [md5:3accddf64b1dd03abeb9b0b3e5a7ba44]
//[UHDL]Version Control Version:1.0.1
//[UHDL]Version Control End [md5:3accddf64b1dd03abeb9b0b3e5a7ba44]

//[UHDL]Tool Message Start [md5:a33172b3d6668ee075183e4888187e45]
//Written by UHDL in 2023-07-07 01:19:39
//[UHDL]Tool Message End [md5:a33172b3d6668ee075183e4888187e45]

//[UHDL]User Message Start [md5:d41d8cd98f00b204e9800998ecf8427e]

//[UHDL]User Message End [md5:d41d8cd98f00b204e9800998ecf8427e]

//[UHDL]Content Start [md5:52de3cee23d2812bc32beb1e73bceb70]
module operation_demo (
	input        clk  ,
	input        rst_n,
	input  [1:0] A    ,
	input  [1:0] B    ,
	input  [3:0] C    ,
	output       E    );
	wire [0:0] Cut_LowerBit_A;
	wire [1:0] Cut_TwoBit_C  ;
	wire [0:0] A_Or_B        ;
	wire [0:0] A_And_B       ;
	wire [0:0] Not_A         ;
	wire [1:0] A_BitOr_B     ;
	wire [1:0] A_BitAnd_B    ;
	wire [1:0] Inverse_A     ;
	wire [3:0] A_Combine_B   ;
	reg  [0:0] demo_w        ;
	reg  [0:0] demo_r        ;
	assign E = 1'b0;
	
	assign Cut_LowerBit_A = A[0:0];
	
	assign Cut_TwoBit_C = C[1:0];
	
	assign A_Or_B = (A[0:0] || B[1:1]);
	
	assign A_And_B = (A[0:0] && B[1:1]);
	
	assign Not_A = (!A);
	
	assign A_BitOr_B = (A | B);
	
	assign A_BitAnd_B = (A & B);
	
	assign Inverse_A = (~A);
	
	assign A_Combine_B = {A, B};
	
	always @(*) begin
	    if((A == B)) demo_w = C[1:1];
	    else demo_w = C[0:0];
	end
	
	always @(posedge clk or negedge rst_n) begin
	    if(~rst_n) demo_r <= 1'b0;
	    else begin
	        if((A == B)) demo_r <= C[1:1];
	        else demo_r <= C[0:0];
	    end
	end
	

endmodule
//[UHDL]Content End [md5:52de3cee23d2812bc32beb1e73bceb70]

//[UHDL]Parameter Start [md5:d41d8cd98f00b204e9800998ecf8427e]

//[UHDL]Parameter End [md5:d41d8cd98f00b204e9800998ecf8427e]

